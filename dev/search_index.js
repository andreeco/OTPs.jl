var documenterSearchIndex = {"docs":
[{"location":"#OneTimePasswords","page":"Home","title":"OneTimePasswords","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OneTimePasswords.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#OneTimePasswords.OneTimePasswords","page":"Home","title":"OneTimePasswords.OneTimePasswords","text":"module OneTimePasswords\n\nA minimal, fast Julia module for generating and verifying counter-based (HOTP, RFC 4226), time-based (TOTP, RFC 6238) and  challenge-response (OCRA, RFC 6287) one-time passwords. Also provides provisioning URIs and QR-codes for authenticator apps.\n\nExamples\n\njulia> using OneTimePasswords\n\njulia> secret = generate_secret();\n\njulia> code = generate(HOTP(), secret, 0; digits=6);\n\njulia> verify(HOTP(), secret, 0, code)\ntrue\n\njulia> account = \"alice@example.com\";\n\njulia> issuer  = \"MyApp\";\n\njulia> urilink = uri(HOTP(), secret, account, issuer;\n               digits=6, counter=0, algorithm=:SHA1);\n\njulia> svg = qrcode(urilink; format=:svg, size=200, border=2);\n\njulia> tmp_svg = tempname() * \"hotp.svg\";\n\njulia> open(tmp_svg,\"w\") do io\n           write(io, svg)\n       end;\n\njulia> tmp_png = tempname() * \"hotp.png\";\n\njulia> pngfile = qrcode(urilink; format=\"png\", path=tmp_png);\n\njulia> isfile(pngfile)\ntrue\n\njulia> # qrcode(urilink; format=:ascii, border=1) # Print in the REPL\n\njulia> using OneTimePasswords, Dates\n\njulia> secret = generate_secret();\n\njulia> code = generate(TOTP(), secret; period=Second(30), digits=6);\n\njulia> verify(TOTP(), secret, code; allowed_drift=Second(30))\ntrue\n\njulia> account = \"alice@example.com\";\n\njulia> issuer  = \"MyApp\";\n\njulia> urilink = uri(TOTP(), secret, account, issuer; digits=6, \n       period=Second(30));\n\njulia> svg = qrcode(urilink; format=:svg, size=200, border=2);\n\njulia> tmp_svg = tempname() * \".svg\";\n\njulia> open(tmp_svg, \"w\") do io\n           write(io, svg)\n       end;\n\njulia> tmp_png = tempname() * \".png\";\n\njulia> pngfile = qrcode(urilink; format=\"png\", path=tmp_png);\n\njulia> isfile(pngfile)\ntrue\n\njulia> # qrcode(urilink; format=:ascii, border=1) # Print in the REPL\n\njulia> using OneTimePasswords, Dates\n\njulia> secret = generate_secret();\n\njulia> suite = \"OCRA-1:HOTP-SHA512-8:QA10-T1M\";\n\njulia> dt = DateTime(2020,1,1,0,0,30)\n2020-01-01T00:00:30\n\njulia> code = generate(OCRA(), secret;\n                          suite=suite,\n                          challenge=\"SIG1400000\",\n                          timestamp=dt,\n                          digits=8,\n                          algorithm=:SHA512);\n\njulia> verify(OCRA(), secret, code;\n               suite=suite,\n               challenge=\"SIG1400000\",\n               timestamp=dt + Second(60),\n               allowed_drift=Second(60),\n               digits=8,\n               algorithm=:SHA512)\ntrue\n\njulia> account = \"alice@example.com\";\n\njulia> issuer  = \"MyApp\";\n\njulia> urilink = uri(OCRA(), secret, \"bob\", \"MyApp\";\n            suite=suite,\n            challenge=\"SIG1400000\",\n            timestamp=dt);\n\njulia> svg = qrcode(urilink; format=:svg, size=200, border=2);\n\njulia> tmp_svg = tempname() * \".svg\";\n\njulia> open(tmp_svg, \"w\") do io\n           write(io, svg)\n       end;\n\njulia> tmp_png = tempname() * \".png\";\n\njulia> pngfile = qrcode(urilink; format=\"png\", path=tmp_png);\n\njulia> isfile(pngfile)\ntrue\n\njulia> # qrcode(urilink; format=:ascii, border=1) # Print in the REPL\n\nSee also generate_secret, AbstractOTP, HOTP,  TOTP, OCRA,  generate, verify  uri and qrcode.\n\n\n\n\n\n","category":"module"},{"location":"#OneTimePasswords.AbstractOTP","page":"Home","title":"OneTimePasswords.AbstractOTP","text":"AbstractOTP\n\nAbstract supertype for one-time-password generators.\n\n\n\n\n\n","category":"type"},{"location":"#OneTimePasswords.HOTP","page":"Home","title":"OneTimePasswords.HOTP","text":"HOTP()\n\nCounter-based OTP (RFC 4226).\n\n\n\n\n\n","category":"type"},{"location":"#OneTimePasswords.OCRA","page":"Home","title":"OneTimePasswords.OCRA","text":"OCRA()\n\nThe OATH Challenge-Response Algorithm (RFC 6287).\n\n\n\n\n\n","category":"type"},{"location":"#OneTimePasswords.TOTP","page":"Home","title":"OneTimePasswords.TOTP","text":"TOTP()\n\nTime-based OTP (RFC 6238).\n\n\n\n\n\n","category":"type"},{"location":"#OneTimePasswords._build_ocra_message","page":"Home","title":"OneTimePasswords._build_ocra_message","text":"_build_ocra_message(\n    suite::AbstractString,\n    counter::Union{Nothing,Int}=nothing,\n    challenge::AbstractString=\"\",\n    passwordhash::AbstractString=\"\",\n    session_info::AbstractString=\"\",\n    timestamp::Union{Nothing,Int}=nothing)::Vector{UInt8}\n\nConstruct the binary “DataInput” value for OCRA (RFC 6287).\n\nThe overall layout is:\n\nDataInput = UTF8(suite) ‖ 0x00 ‖ [ C ] ‖ [ Q ] ‖ [ P ] ‖ [ S ] ‖ [ T ]\n\nwhere\n\nSuite: UTF-8 bytes of the suite string, then a 0x00 separator.\nC: 8-byte big-endian counter (if suite contains “C”).\nQ: challenge field (numeric/hex/alpha, padded per Qxxx) (if “Q”).\nP: password-hash left-padded to the HMAC output length (if PSHAx).  \nS: session_info UTF-8 right-padded to Snnn bytes (if Snnn).\nT: 8-byte big-endian timestamp (if suite contains “T”).\n\n\n\n\n\n","category":"function"},{"location":"#OneTimePasswords._dynamic_truncate-Tuple{Vector{UInt8}, Int64}","page":"Home","title":"OneTimePasswords._dynamic_truncate","text":"_dynamic_truncate(h::Vector{UInt8}, digits::Int)::String\n\nPerform dynamic truncation (as in HOTP) on the HMAC result h and return the OTP as a zero-padded string of length digits.\n\n\n\n\n\n","category":"method"},{"location":"#OneTimePasswords._hmac-Tuple{Symbol, Vector{UInt8}, Vector{UInt8}}","page":"Home","title":"OneTimePasswords._hmac","text":"_hmac(algorithm::Symbol, key::Vector{UInt8}, \n    msg::Vector{UInt8})::Vector{UInt8}\n\nCompute the HMAC of msg using key and the selected algorithm. Supported algorithms are :SHA1, :SHA256, and :SHA512.\n\n\n\n\n\n","category":"method"},{"location":"#OneTimePasswords.base32decode-Tuple{AbstractString}","page":"Home","title":"OneTimePasswords.base32decode","text":"base32decode(str::AbstractString)::Vector{UInt8}\n\nDecode a Base32 string (per RFC 4648) into a vector of bytes. The input string is not case sensitive and may contain whitespace or  padding (=). Throws an exception on invalid characters or impossible encoding.\n\nSee also base32encode.\n\n\n\n\n\n","category":"method"},{"location":"#OneTimePasswords.base32encode-Tuple{Vector{UInt8}}","page":"Home","title":"OneTimePasswords.base32encode","text":"base32encode(bytes::Vector{UInt8})::String\n\nEncode a byte vector to a Base32 string according to  RFC 4648. Result is always ASCII, using uppercase A-Z and digits 2-7, with = padding.\n\nSee also base32decode.\n\n\n\n\n\n","category":"method"},{"location":"#OneTimePasswords.exportsvg-Tuple{AbstractString}","page":"Home","title":"OneTimePasswords.exportsvg","text":"exportsvg(\n  msg::AbstractString;\n  size::Int=240,\n  border::Int=4,\n  path::Union{Nothing,String}=nothing,\n  darkcolor::String=\"#000\",\n  lightcolor::String=\"#fff\"\n)::String\n\nGenerate an SVG <svg>…</svg> QR-code encoding msg. If path is given, also write the SVG to that file.\n\nExamples\n\njulia> using OneTimePasswords\n\njulia> OneTimePasswords.exportsvg(\"otpauth://totp/bob?...\", size=200);\n\nSee also qrcode.\n\n\n\n\n\n","category":"method"},{"location":"#OneTimePasswords.generate-Tuple{HOTP, AbstractString, Integer}","page":"Home","title":"OneTimePasswords.generate","text":"generate(::HOTP, secret::AbstractString, counter::Integer;\n         digits::Int=6, algorithm::Symbol=:SHA1)::String\n\nCompute HOTP for secret and counter (RFC 4226).\n\nArguments\n\nsecret: Base32-encoded shared secret.\ncounter: counter value (Integer).\ndigits: code length (default 6).\nalgorithm: :SHA1, :SHA256, or :SHA512.\n\nExamples\n\njulia> using OneTimePasswords\n\njulia> generate(HOTP(), \"JBSWY3DPEHPK3PXP\", 0)\n\"282760\"\n\nSee also verify(::HOTP).\n\n\n\n\n\n","category":"method"},{"location":"#OneTimePasswords.generate-Tuple{OCRA, AbstractString}","page":"Home","title":"OneTimePasswords.generate","text":"generate(::OCRA, secret::AbstractString;\n         suite::AbstractString = \"OCRA-1:HOTP-SHA1-6:QN08\",\n         counter::Union{Nothing, Integer}=nothing,\n         challenge::AbstractString=\"\",\n         password::AbstractString=\"\",\n         session_info::AbstractString=\"\",\n         timestamp::Union{Nothing,Integer}=nothing,\n         digits::Int=6,\n         algorithm::Symbol=:SHA1)::String\n\nCompute an OCRA one-time password (OTP) according to RFC 6287.\n\nArguments:\n\nsecret: Base32-encoded shared secret.\nsuite: OCRA suite definition string.\ncounter: Optional counter value. If omitted, 8 zero bytes are used.\nchallenge: The challenge/question string (e.g. numeric or hex).\npassword: Optional password (P) field.\nsession_info: Optional session information (S) field.\ntimestamp: Optional timestamp (T) as an integer (e.g. Unix time).  \ndigits: The number of digits in the OTP.\nalgorithm: The hash algorithm to use (:SHA1, :SHA256, or :SHA512).\n\nExamples\n\njulia> using OneTimePasswords, Dates\n\njulia> secret = \"M7AB5U4DUCNI4GTUMBMB4QB3LL6RIGOF\"; # generate_secret()\n\njulia> code = generate(OCRA(), secret; suite=\"OCRA-1:HOTP-SHA1-6:QN08\",\n            challenge=\"12345678\")\n\"262022\"\n\njulia> suite = \"OCRA-1:HOTP-SHA512-8:QA10-T1M\";\n\njulia> dt = DateTime(2020,1,1,0,0,30);\n\njulia> generate(OCRA(), secret;\n                 suite=suite,\n                 challenge=\"SIG1400000\",\n                 timestamp=dt,\n                 digits=8,\n                 algorithm=:SHA512)\n\"76056551\"\n\nSee also verify(::OCRA).\n\n\n\n\n\n","category":"method"},{"location":"#OneTimePasswords.generate-Tuple{TOTP, AbstractString}","page":"Home","title":"OneTimePasswords.generate","text":"generate(::TOTP, secret::AbstractString;\n         time=nothing, period::Period=Second(30), digits::Int=6,\n         algorithm::Symbol=:SHA1)::String\n\nCompute a TOTP value for secret at the specified time (RFC 6238), with integer step-countging.\n\nExamples\n\njulia> using OneTimePasswords, Dates\n\njulia> secret = \"M7AB5U4DUCNI4GTUMBMB4QB3LL6RIGOF\"; # generate_secret()\n\njulia> generate(TOTP(), secret; digits=8);\n\njulia> dt = DateTime(2020,1,1,0,0,30);\n\njulia> generate(TOTP(), secret; time=dt, digits=7, period=Second(30), algorithm=:SHA256)\n\"9150483\"\n\nSee also verify(::TOTP).\n\n\n\n\n\n","category":"method"},{"location":"#OneTimePasswords.generate_secret","page":"Home","title":"OneTimePasswords.generate_secret","text":"generate_secret([length::Int=20])::String\n\nGenerate a cryptographically-strong random secret (byte length length) and return it Base32-encoded.  Default is 20 bytes (good for SHA1/TOTP).\n\nExamples\n\njulia> using OneTimePasswords\n\njulia> secret = generate_secret();\n\nSee also base32encode, base32decode.\n\n\n\n\n\n","category":"function"},{"location":"#OneTimePasswords.qrcode-Tuple{AbstractString}","page":"Home","title":"OneTimePasswords.qrcode","text":"qrcode(\n  uri::AbstractString;\n  format::Union{Symbol,String} = :svg,\n  size::Int = 240,\n  border::Int = 4,\n  path::Union{Nothing,String} = nothing,\n  darkcolor::String = \"#000\",\n  lightcolor::String = \"#fff\"\n)::Union{String,String}\n\nGenerate a QR-code for a provisioning uri.  Supports:\n\nSVG (:svg, returns SVG text),\nBitmap (\"png\", \"jpg\", \"gif\", writes to path) and\nTerminal ASCII (:ascii, prints a scannable QR code in the REPL).\n\nExamples\n\njulia> using OneTimePasswords, Dates\n\njulia> secret = \"M7AB5U4DUCNI4GTUMBMB4QB3LL6RIGOF\"; # generate_secret()\n\njulia> code = generate(TOTP(), secret; period=Second(30), digits=6);\n\njulia> verify(TOTP(), secret, code; allowed_drift=Second(30))\ntrue\n\njulia> urilink = uri(TOTP(), secret, \"bob@example.com\", \"MyApp\"; digits=6, \n       period=Second(30));\n\njulia> svg = qrcode(urilink; format=:svg, size=200, border=2);\n\njulia> tmp_svg = tempname() * \".svg\";\n\njulia> open(tmp_svg, \"w\") do io\n           write(io, svg)\n       end;\n\njulia> tmp_png = tempname() * \".png\";\n\njulia> pngfile = qrcode(urilink; format=\"png\", path=tmp_png);\n\njulia> isfile(pngfile)\ntrue\n\njulia> # qrcode(urilink; format=:ascii, border=1) # Print in the REPL\n\nSee also uri and exportsvg.\n\n\n\n\n\n","category":"method"},{"location":"#OneTimePasswords.uri-Tuple{HOTP, AbstractString, AbstractString, AbstractString}","page":"Home","title":"OneTimePasswords.uri","text":"uri(::HOTP, secret::AbstractString,\n    account::AbstractString, issuer::AbstractString;\n    digits::Int=6, counter::Integer=0,\n    algorithm::Symbol=:SHA1)::String\n\nReturn an otpauth://hotp/... provisioning URI for HOTP.\n\nExamples\n\njulia> using OneTimePasswords\n\njulia> secret = \"M7AB5U4DUCNI4GTUMBMB4QB3LL6RIGOF\"; # generate_secret()\n\njulia> uri(HOTP(), secret, \"bob@example.com\", \"MyApp\"; counter=5)\n\"otpauth://hotp/MyApp%3Abob%40example.com?secret=M7AB5U4DUCNI4GTUMBMB4QB3LL6RIGOF&issuer=MyApp&digits=6&counter=5&algorithm=SHA1\"\n\nSee also qrcode.\n\n\n\n\n\n","category":"method"},{"location":"#OneTimePasswords.uri-Tuple{OCRA, AbstractString, AbstractString, AbstractString}","page":"Home","title":"OneTimePasswords.uri","text":"uri(::OCRA, secret::AbstractString,\n    account::AbstractString, issuer::AbstractString;\n    suite::AbstractString=\"OCRA-1:HOTP-SHA1-6:QN08\",\n    digits::Int=6,\n    algorithm::Symbol=:SHA1,\n    counter::Union{Nothing,Int}=nothing,\n    challenge::AbstractString=\"\",\n    password::AbstractString=\"\",\n    session_info::AbstractString=\"\",\n    timestamp::Union{Nothing,Int,DateTime}=nothing\n   )::String\n\nReturn an otpauth://ocra/... provisioning URI for OCRA.\n\nThe label will be issuer:account (percent-escaped), and the query string will include secret, issuer, suite, digits, algorithm, and any of the optional fields you pass in.\n\njulia> using OneTimePasswords\n\njulia> secret = \"M7AB5U4DUCNI4GTUMBMB4QB3LL6RIGOF\"; # generate_secret()\n\njulia> uri(OCRA(), secret, \"bob@example.com\", \"MyApp\");\n\njulia> uri(OCRA(), secret, \"alice@site.com\", \"YourOrg\";\n            suite=\"OCRA-1:HOTP-SHA256-8:C-QN08-PSHA1\",\n            digits=8,\n            algorithm=:SHA256,\n            counter=5,\n            challenge=\"12345678\",\n            password=\"7110eda4d09e062aa5e4a390b0a572ac0d2c0220\");\n\nSee also qrcode.\n\n\n\n\n\n","category":"method"},{"location":"#OneTimePasswords.uri-Tuple{TOTP, AbstractString, AbstractString, AbstractString}","page":"Home","title":"OneTimePasswords.uri","text":"uri(::TOTP, secret::AbstractString,\n    account::AbstractString, issuer::AbstractString;\n    digits::Int=6, period::Period=Second(30))::String\n\nReturn an otpauth://totp/... provisioning URI for TOTP.\n\nExamples\n\njulia> using OneTimePasswords\n\njulia> secret = \"M7AB5U4DUCNI4GTUMBMB4QB3LL6RIGOF\"; # generate_secret()\n\njulia> uri(TOTP(), secret, \"alice@example.com\", \"MyApp\");\n\njulia> uri(TOTP(), secret, \"bob@site.com\", \"YourApp\"; digits=8, period=60)\n\"otpauth://totp/YourApp%3Abob%40site.com?secret=M7AB5U4DUCNI4GTUMBMB4QB3LL6RIGOF&issuer=YourApp&digits=8&period=60\"\n\nSee also qrcode.\n\n\n\n\n\n","category":"method"},{"location":"#OneTimePasswords.verify-Tuple{HOTP, AbstractString, Integer, AbstractString}","page":"Home","title":"OneTimePasswords.verify","text":"verify(::HOTP, secret::AbstractString, counter::Integer,\n       code::AbstractString; digits::Int=6,\n       algorithm::Symbol=:SHA1)::Bool\n\nReturn true if code matches the HOTP for secret and counter.\n\nExamples\n\njulia> using OneTimePasswords\n\njulia> secret = generate_secret();\n\njulia> code = generate(HOTP(), secret, 123; digits=6);\n\njulia> verify(HOTP(), secret, 123, code)\ntrue\n\njulia> verify(HOTP(), secret, 124, code)\nfalse\n\nSee also generate(::HOTP).\n\n\n\n\n\n","category":"method"},{"location":"#OneTimePasswords.verify-Tuple{OCRA, AbstractString, AbstractString}","page":"Home","title":"OneTimePasswords.verify","text":"verify(::OCRA, secret::AbstractString, code::AbstractString;\n       suite::AbstractString = \"OCRA-1:HOTP-SHA1-6:QN08\",\n       counter::Union{Nothing, Integer}=nothing,\n       challenge::AbstractString=\"\",\n       password::AbstractString=\"\",\n       session_info::AbstractString=\"\",\n       timestamp::Union{Nothing,Integer}=nothing,\n       allowed_drift::Period=Second(0),\n       digits::Int=6,\n       algorithm::Symbol=:SHA1)::Bool\n\nVerify that the provided code matches the OCRA OTP.\n\nExamples\n\njulia> using OneTimePasswords, Dates\n\njulia> secret = generate_secret();\n\njulia> code = generate(OCRA(), secret; challenge=\"12345678\");\n\njulia> verify(OCRA(), secret, code; challenge=\"12345678\")\ntrue\n\njulia> using OneTimePasswords, Dates\n\njulia> secret = generate_secret();\n\njulia> suite = \"OCRA-1:HOTP-SHA512-8:QA10-T1M\";\n\njulia> dt = DateTime(2020,1,1,0,0,30)\n2020-01-01T00:00:30\n\njulia> code2 = generate(OCRA(), secret;\n                          suite=suite,\n                          challenge=\"SIG1400000\",\n                          timestamp=dt,\n                          digits=8,\n                          algorithm=:SHA512);\n\njulia> verify(OCRA(), secret, code2;\n               suite=suite,\n               challenge=\"SIG1400000\",\n               timestamp=dt + Second(60),\n               allowed_drift=Second(60),\n               digits=8,\n               algorithm=:SHA512)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#OneTimePasswords.verify-Tuple{TOTP, AbstractString, AbstractString}","page":"Home","title":"OneTimePasswords.verify","text":"verify(::TOTP, secret::AbstractString, code::AbstractString;\n       period::Period=Second(30), allowed_drift::Period=Second(30),\n       digits::Int=6, time=nothing,\n       algorithm::Symbol=:SHA1)::Bool\n\nReturn true if code is a valid TOTP for secret at time, allowing ±allowed_drift time window.\n\nExamples\n\njulia> using OneTimePasswords, Dates\n\njulia> secret = \"M7AB5U4DUCNI4GTUMBMB4QB3LL6RIGOF\"; # generate_secret()\n\njulia> dt = DateTime(2022,1,1,0,0,30);\n\njulia> code = generate(TOTP(), secret; time=dt, digits=8);\n\njulia> verify(TOTP(), secret, code; time=dt, digits=8)\ntrue\n\njulia> verify(TOTP(), secret, code; time=dt+Minute(1), digits=8,\n                           allowed_drift=Second(60))\ntrue\n\njulia> verify(TOTP(), secret, code; time=dt+Minute(1), digits=8,\n                           allowed_drift=Second(30))\nfalse\n\nSee also generate(::TOTP).\n\n\n\n\n\n","category":"method"}]
}
